{"version":3,"file":"react-global-states.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/extends.js","../src/index.js"],"sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","import React, { useState, useEffect } from 'react';\n\n// \"The\" global store\nlet store = {};\n\n// internal publisher-subscriber system to\n// notify containers of store changes.\nconst pubsub = {\n  handlers: [],\n  subscribe(handler) {\n    // console.log('subscribed');\n    if (!this.handlers.includes(handler)) {\n      this.handlers.push(handler);\n    }\n  },\n  unsubscribe(handler) {\n    // console.log('unsubscribed');\n    const index = this.handlers.indexOf(handler);\n    if (index > -1) {\n      this.handlers.splice(index, 1);\n    }\n  },\n  notify(newStore) {\n    this.handlers.forEach(handler => handler(newStore));\n  }\n};\n\n// global state merger. unlike redux, I am not enforcing reducer layer\nexport const updateState = (partial) => {\n  const newStore = {\n    ...store,\n    ...partial,\n  };\n  store = newStore;\n  pubsub.notify(newStore);\n};\n\n// curry function to partially update a sub property of global store.\n// e.g const updateCartState = createSubPropUpdater('cart');\n// updateCartState({ items: [], quantity: 0 });\n// this is equivalent to\n// updateState({ cart: { ...store.cart, items: [], quantity: 0 } })\nexport const createSubPropUpdater = (propName) => {\n  return (partial) => {\n    const newStore = {\n      ...store,\n      [propName]: {\n        ...(store[propName] || {}),\n        ...partial,\n      }\n    };\n    store = newStore;\n    pubsub.notify(newStore);\n  };\n};\n\nexport const setState = (newState) => {\n  const newStore = { ...newState };\n  store = newStore;\n  pubsub.notify(newStore);\n};\n\n// utility\nconst plainObjectPrototype = Object.getPrototypeOf({});\nconst twoLevelIsEqual = (oldState, newState, level = 1) => {\n  if (\n    oldState === null\n    || newState === null\n    || oldState === undefined\n    || newState === undefined\n  ) {\n    return oldState === newState;\n  }\n\n  const oldStatePrototype = Object.getPrototypeOf(oldState);\n  if (\n    level <= 2\n    && (oldStatePrototype === plainObjectPrototype || Array.isArray(oldState))\n    && oldStatePrototype === Object.getPrototypeOf(newState)\n  ) {\n    // check if all props of oldState is in newState\n    let isEqual = Object\n      .entries(oldState)\n      .every(([key, val]) => twoLevelIsEqual(val, newState[key], level + 1));\n    // check if all props of newState is in oldState\n    isEqual = isEqual && Object\n      .entries(newState)\n      .every(([key, val]) => twoLevelIsEqual(oldState[key], val, level + 1));\n    // if so, they are equal (upto two levels).\n    return isEqual;\n  }\n  if (oldState instanceof Date && newState instanceof Date) {\n    return oldState.getTime() === newState.getTime();\n  }\n  return oldState === newState;\n};\n\n// used to wrap components to receive global store props\nexport const connect = (propsToConnectTo = [], Component) => {\n  return (props) => { // state container\n    let [state, setState] = useState(\n      propsToConnectTo.reduce((acc, propName) => {\n        if (propName in store) {\n          acc[propName] = store[propName];\n        }\n        return acc;\n      }, {}),\n    );\n\n    useEffect(() => {\n      const newStateHandler = (newStore) => {\n        const newState = propsToConnectTo.reduce((acc, propName) => {\n          if (propName in store) {\n            acc[propName] = newStore[propName];\n          }\n          return acc;\n        }, {});\n        // console.log('current state', state);\n        // console.log('new state', newState);\n        // console.log('twoLevelIsEqual', twoLevelIsEqual(state, newState));\n        if (!twoLevelIsEqual(state, newState)) {\n          setState(newState);\n        }\n      };\n      pubsub.subscribe(newStateHandler);\n      // on component unmount, unsubscribe to prevent mem leak\n      return () => pubsub.unsubscribe(newStateHandler);\n    }, [state]);\n\n    return <Component {...state} {...props} />;\n  };\n}\n\nexport const useGlobalStates = (propsToConnectTo = []) => {\n  let [state, setState] = useState(\n    propsToConnectTo.reduce((acc, propName) => {\n      if (propName in store) {\n        acc[propName] = store[propName];\n      }\n      return acc;\n    }, {}),\n  );\n\n  useEffect(() => {\n    const newStateHandler = (newStore) => {\n      const newState = propsToConnectTo.reduce((acc, propName) => {\n        if (propName in store) {\n          acc[propName] = newStore[propName];\n        }\n        return acc;\n      }, {});\n      // console.log('current state', state);\n      // console.log('new state', newState);\n      // console.log('twoLevelIsEqual', twoLevelIsEqual(state, newState));\n      if (!twoLevelIsEqual(state, newState)) {\n        setState(newState);\n      }\n    };\n    pubsub.subscribe(newStateHandler);\n    // on component unmount, unsubscribe to prevent mem leak\n    return () => pubsub.unsubscribe(newStateHandler);\n  }, [state]);\n\n  return state;\n};\n"],"names":["_extends","module","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","store","pubsub","handlers","subscribe","handler","includes","push","unsubscribe","index","indexOf","splice","notify","newStore","forEach","plainObjectPrototype","getPrototypeOf","twoLevelIsEqual","oldState","newState","level","undefined","oldStatePrototype","Array","isArray","isEqual","entries","every","val","Date","getTime","propsToConnectTo","Component","props","useState","reduce","acc","propName","state","setState","useEffect","newStateHandler","React","partial"],"mappings":"sWAAA,SAASA,IAeP,OAdAC,UAAiBD,EAAWE,OAAOC,QAAU,SAAUC,GACrD,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GAGFJ,EAASa,MAAMC,KAAMR,WAG9BL,UAAiBD,KCfbe,EAAQ,GAINC,EAAS,CACbC,SAAU,GACVC,mBAAUC,GAEHL,KAAKG,SAASG,SAASD,SACrBF,SAASI,KAAKF,IAGvBG,qBAAYH,OAEJI,EAAQT,KAAKG,SAASO,QAAQL,GAChCI,GAAS,QACNN,SAASQ,OAAOF,EAAO,IAGhCG,gBAAOC,QACAV,SAASW,SAAQ,SAAAT,UAAWA,EAAQQ,QAwCvCE,EAAuB3B,OAAO4B,eAAe,IAC7CC,EAAkB,SAACC,EAAUC,EAAUC,eAAAA,IAAAA,EAAQ,GAEpC,OAAbF,GACgB,OAAbC,QACaE,IAAbH,QACaG,IAAbF,SAEID,IAAaC,MAGhBG,EAAoBlC,OAAO4B,eAAeE,MAE9CE,GAAS,IACLE,IAAsBP,GAAwBQ,MAAMC,QAAQN,KAC7DI,IAAsBlC,OAAO4B,eAAeG,GAC/C,KAEIM,EAAUrC,OACXsC,QAAQR,GACRS,OAAM,gBAAEhC,OAAKiC,cAASX,EAAgBW,EAAKT,EAASxB,GAAMyB,EAAQ,aAErEK,EAAUA,GAAWrC,OAClBsC,QAAQP,GACRQ,OAAM,gBAAEhC,OAAKiC,cAASX,EAAgBC,EAASvB,GAAMiC,EAAKR,EAAQ,aAInEF,aAAoBW,MAAQV,aAAoBU,KAC3CX,EAASY,YAAcX,EAASW,UAElCZ,IAAaC,aAIC,SAACY,EAAuBC,mBAAvBD,IAAAA,EAAmB,IAClC,SAACE,SACkBC,WACtBH,EAAiBI,QAAO,SAACC,EAAKC,UACxBA,KAAYpC,IACdmC,EAAIC,GAAYpC,EAAMoC,IAEjBD,IACN,KANAE,OAAOC,cASZC,aAAU,eACFC,EAAkB,SAAC5B,OACjBM,EAAWY,EAAiBI,QAAO,SAACC,EAAKC,UACzCA,KAAYpC,IACdmC,EAAIC,GAAYxB,EAASwB,IAEpBD,IACN,IAIEnB,EAAgBqB,EAAOnB,IAC1BoB,EAASpB,WAGbjB,EAAOE,UAAUqC,GAEV,kBAAMvC,EAAOM,YAAYiC,MAC/B,CAACH,IAEGI,gBAACV,OAAcM,EAAWL,6BAvFD,SAACI,UAC5B,SAACM,SACA9B,OACDZ,UACFoC,QACKpC,EAAMoC,IAAa,MACpBM,OAGP1C,EAAQY,EACRX,EAAOU,OAAOC,gBAIM,SAACM,OACjBN,OAAgBM,GACtBlB,EAAQY,EACRX,EAAOU,OAAOC,kBA/BW,SAAC8B,OACpB9B,OACDZ,KACA0C,GAEL1C,EAAQY,EACRX,EAAOU,OAAOC,sBAmGe,SAACkB,YAAAA,IAAAA,EAAmB,UACzBG,WACtBH,EAAiBI,QAAO,SAACC,EAAKC,UACxBA,KAAYpC,IACdmC,EAAIC,GAAYpC,EAAMoC,IAEjBD,IACN,KANAE,OAAOC,cASZC,aAAU,eACFC,EAAkB,SAAC5B,OACjBM,EAAWY,EAAiBI,QAAO,SAACC,EAAKC,UACzCA,KAAYpC,IACdmC,EAAIC,GAAYxB,EAASwB,IAEpBD,IACN,IAIEnB,EAAgBqB,EAAOnB,IAC1BoB,EAASpB,WAGbjB,EAAOE,UAAUqC,GAEV,kBAAMvC,EAAOM,YAAYiC,MAC/B,CAACH,IAEGA"}